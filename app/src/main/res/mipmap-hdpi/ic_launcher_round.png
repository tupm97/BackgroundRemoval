package com.example.myapplication;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.res.AssetManager;
import android.os.AsyncTask;
import android.os.Environment;
import android.os.PowerManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.Util;

public class MainActivity extends AppCompatActivity {

    ProgressDialog mProgressDialog;

    Button button;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        mProgressDialog = new ProgressDialog(MainActivity.this);
        mProgressDialog.setMessage("A message");
        mProgressDialog.setIndeterminate(true);
        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        mProgressDialog.setCancelable(true);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        button=findViewById(R.id.button);

        AssetManager manager=getApplicationContext().getAssets();


        Log.d("main", "onCreate: "+manager.toString());
       
    }

    class DownloadMusicfromInternet extends AsyncTask<String, Integer, String> {

        private Context context;
        private PowerManager.WakeLock mWakeLock;

        public DownloadMusicfromInternet(Context context) {
            this.context = context;
        }

        @Override
        protected String doInBackground(String... sUrl) {
            InputStream input = null;
            OutputStream output = null;
            URLConnection connection = null;
            try {
              //  File f= new File(Environment.getExternalStorageDirectory().getPath());
//                if(!f.exists()){
//                    f.mkdirs();
//                    Log.d("main", "doInBackground: directory created");
//                }

                File out=new File(Environment.getExternalStorageDirectory().getPath(),"people_hq_768x768_1_1543441179.tflite");
                if(!out.exists()){
                    out.createNewFile();
                    Log.d("main", "doInBackground: creat file");
                }
                Log.d("main", "doInBackground: start");
                URL url = new URL(sUrl[0]);
                connection =  url.openConnection();
//                connection.setRequestMethod("GET");
                connection.connect();

                // expect HTTP 200 OK, so we don't mistakenly save error report
                // instead of the file
//                if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
//                    Log.d("Connect", "doInBackground: "+"Server returned HTTP " + connection.getResponseCode()
//                            + " " + connection.getResponseMessage());
//                    return "Server returned HTTP " + connection.getResponseCode()
//                            + " " + connection.getResponseMessage();
//                }

                // this will be useful to display download percentage
                // might be -1: server did not report the length
                int fileLength = connection.getContentLength();

                // download the file
                input = new BufferedInputStream(url.openStream(),10*1024);
//                output = new FileOutputStream(out);
                output=new FileOutputStream(out);//(Environment.getExternalStorageDirectory().getPath()+"/"+"mySuperVideo.pdf",Context.MODE_PRIVATE);

                byte data[] = new byte[1024];
                long total = 0;
                int count=0;
                while ((count = input.read(data)) != -1) {
                    // allow canceling with back button
                    if (isCancelled()) {
                        input.close();
                        return null;
                    }
                    total += count;
                    // publishing the progress....
                    if (fileLength > 0) // only if total length is known
                        publishProgress((int) (total * 100 / fileLength));
                    output.write(data, 0, count);
                    Log.d("main", "doInBackground: ");
                }
            } catch (Exception e) {
                return e.toString();
            } finally {
                try {
                    if (o